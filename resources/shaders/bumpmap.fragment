/* Simple fragment shader with a per fragment phong lighting model.
 */ 
#version 130
// TODO: set from java to match MAX_TEXTURE_LAYERS there
#define MAX_TEXTURE_LAYERS 4
	
uniform bool useLighting;
struct LightInfo {
	vec4 Position; // Light position in world coords.
	vec3 La; // Ambient light intensity
	vec3 Ld; // Diffuse light intensity
	vec3 Ls; // Specular light intensity
};
uniform LightInfo Light;
	
struct MaterialInfo {
	vec3 Ka; // Ambient reflectivity
	vec3 Kd; // Diffuse reflectivity
	vec3 Ks; // Specular reflectivity
	float Shininess; // Specular shininess factor
};
uniform MaterialInfo Material;

uniform mat4 ModelViewMatrix;
 
// corresponds with output from vertex shader, gets interpolated
in vec3 VertexEye;
in vec3 Normal;
in vec4 Tangent;
in vec2 BumpMapCoord;
in vec4 ShadowCoord;
in vec2 TexCoord0;
in vec2 TexCoord1;
in vec2 TexCoord2;
in vec2 TexCoord3;

uniform bool useTexture[MAX_TEXTURE_LAYERS];
uniform sampler2D Tex[MAX_TEXTURE_LAYERS];
uniform sampler2D BumpMap;
uniform bool useShadowMap;
uniform sampler2DShadow ShadowMap;

uniform bool useAlphaTreshold;
uniform float alphaTreshold;

uniform bool useBumpMaps;
 
// output to buffer
out vec4 FragColor;

/*
 * shading with phong model (ambient, diffuse, specular)
 * lightDir, viewDir and norm have to be in the same coordinate system (e.g. eye or tangent space)
 */
vec3 phongModel( vec3 lightDir, vec3 viewDir, vec3 norm, out vec3 ambient, out vec3 diffuse, out vec3 spec )
{	
	vec3 r = reflect( -lightDir, norm );
	ambient = Light.La * Material.Ka;
	float sDotN = max( dot(lightDir,norm), 0.0 );
	diffuse = Light.Ld * Material.Kd * sDotN;
	spec = vec3(0.0);
	if( sDotN > 0.0 )
		spec = Light.Ls * Material.Ks *
				pow( max( dot(r,viewDir), 0.0 ), Material.Shininess );
	return ambient + diffuse + spec;
}

const int levels = 3;
const float scaleFactor = 1.0 / levels;
// toon shading (only ambient and diffuse)
vec3 toonShade( vec3 lightDir, vec3 norm, out vec3 ambient, out vec3 diffuse )
{
	ambient = Light.La * Material.Ka;
	float cosine = max( dot(lightDir,norm) , 0.0 );
	diffuse = Light.Ld * Material.Kd * floor( cosine * levels ) * scaleFactor;
	
	return ambient + diffuse;
}
 
void main()
{
	vec3 ambient, diff, spec;
	vec4 texColor = vec4(1.0);
	
	// apply textures
	// TODO: autogenerate based on MAX_TEXTURE_LAYERS
	if ( useTexture[0] ) {
		texColor = texture( Tex[0], TexCoord0 );
	}
	if ( useTexture[1] ) {
		vec4 layerColor = texture( Tex[1], TexCoord1 );
		texColor = mix(texColor, layerColor, layerColor.a);
	}
	if ( useTexture[2] ) {
		vec4 layerColor = texture( Tex[2], TexCoord2 );
		texColor = mix(texColor, layerColor, layerColor.a);
	}
	if ( useTexture[3] ) {
		vec4 layerColor = texture( Tex[3], TexCoord3 );
		texColor = mix(texColor, layerColor, layerColor.a);
	}
	
	if ( useLighting ) {
		vec3 normal = normalize(Normal);
		vec3 tangent = normalize(Tangent.xyz);
		vec3 viewDirection, lightDirection;
		vec4 lightPositionEye = ModelViewMatrix * Light.Position;
		
		// transform light and view direction to eye space
		viewDirection = normalize(-VertexEye);
		
		// directional light?
		if( Light.Position.w == 0.0 )
			lightDirection = normalize(vec3(lightPositionEye));
		else
			lightDirection = normalize(vec3(lightPositionEye) - VertexEye);
		
		if ( useBumpMaps ) {
			// compute bitangent
			vec3 bitangent = normalize( cross( normal, tangent ) ) * Tangent.w;
	
			// transformation from eye to tangent space
			mat3 tangentMatrix = mat3(
				tangent.x, bitangent.x, normal.x,
				tangent.y, bitangent.y, normal.y,
				tangent.z, bitangent.z, normal.z );
		
			// transform light and view direction to tangent space
			viewDirection = tangentMatrix * viewDirection;
			lightDirection = tangentMatrix * lightDirection;
			normal = normalize(texture( BumpMap, BumpMapCoord ).xyz * 2.0 - 1.0);
		}
		
		phongModel( lightDirection, viewDirection, normal, ambient, diff, spec );
		//toonShade( LightDirection, normal, ambient, diff );
		
		// shadow map lookup
		float shadowFactor = 1.0;
		if ( useShadowMap ) {
			//vec3 shadowCoordCart = ShadowCoord.xyz / ShadowCoord.w; // from homogene coordiantes to carthesian
			//float shadowDepthValue = texture(ShadowMap, shadowCoordCart.xy).r; // lookup of depth value in shadow map
			//float fragmentDepthValue = shadowCoordCart.z; // fragment depth value to compare
			//if (shadowDepthValue < fragmentDepthValue)
			//	shadowFactor = 0.0; // in shadow
			
			// PCF (percentage closer filtering): blur with adjacent shadow map comparison results
			float sum = 0 ;
			// Sum contributions from texels around ShadowCoord
			sum += textureProjOffset(ShadowMap, ShadowCoord, ivec2(-1,-1));
			sum += textureProjOffset(ShadowMap, ShadowCoord, ivec2(-1,1));
			sum += textureProjOffset(ShadowMap, ShadowCoord, ivec2(1,1));
			sum += textureProjOffset(ShadowMap, ShadowCoord, ivec2(1,-1));
			shadowFactor = sum * 0.25;
		}
		
		diff = diff * shadowFactor;
		spec = spec * shadowFactor;
		
		FragColor = vec4(ambient + diff, 1.0) * texColor + vec4(spec, 0.0);
	} else {
		FragColor = vec4(Material.Ka + Material.Kd, 1.0) * texColor;
	}
	
	if ( useAlphaTreshold ) {
		if ( FragColor.a < alphaTreshold )
			FragColor.a = 0.0;
		else
			FragColor.a = 1.0;
	}
		
	if( FragColor.a < 0.01 )
		discard;
} 
