/* Simple fragment shader with a per fragment phong lighting model.
 */ 
#version 130
// TODO: set from java to match MAX_TEXTURE_LAYERS there
#define MAX_TEXTURE_LAYERS 4

// corresponds with output from vertex shader, gets interpolated
in vec2 TexCoord0;
in vec2 TexCoord1;
in vec2 TexCoord2;
in vec2 TexCoord3;

uniform bool useTexture[MAX_TEXTURE_LAYERS];
uniform sampler2D Tex[MAX_TEXTURE_LAYERS];

uniform bool useAlphaTreshold;
uniform float alphaTreshold;
 
void main()
{
	vec4 texColor = vec4(1.0);
	
	// apply textures
	// TODO: autogenerate based on MAX_TEXTURE_LAYERS
	if ( useTexture[0] ) {
		texColor = texture( Tex[0], TexCoord0 );
	}
	if ( useTexture[1] ) {
		vec4 layerColor = texture( Tex[1], TexCoord1 );
		texColor = mix(texColor, layerColor, layerColor.a);
	}
	if ( useTexture[2] ) {
		vec4 layerColor = texture( Tex[2], TexCoord2 );
		texColor = mix(texColor, layerColor, layerColor.a);
	}
	if ( useTexture[3] ) {
		vec4 layerColor = texture( Tex[3], TexCoord3 );
		texColor = mix(texColor, layerColor, layerColor.a);
	}
	
	if ( useAlphaTreshold ) {
		if ( texColor.a < alphaTreshold )
			texColor.a = 0.0;
		else
			texColor.a = 1.0;
	}
		
	if( texColor.a < 0.01 )
		discard;
	
	// nothing to output do, only depth buffer needed
} 
