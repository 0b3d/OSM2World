/* Very simple fragment shader. It basically passes the
 * (interpolated) vertex color on to the individual pixels.
 */ 
#version 130
	
struct LightInfo {
	vec3 Position; // Light position in world coords.
	vec3 La; // Ambient light intensity
	vec3 Ld; // Diffuse light intensity
	vec3 Ls; // Specular light intensity
};
uniform LightInfo Light;
	
struct MaterialInfo {
	vec3 Ka; // Ambient reflectivity
	vec3 Kd; // Diffuse reflectivity
	vec3 Ks; // Specular reflectivity
	float Shininess; // Specular shininess factor
};
uniform MaterialInfo Material;

uniform mat4 ModelViewMatrix;
 
// corresponds with output from vertex shader, gets interpolated
in vec3 Normal;
in vec3 VertexEye;    
 
// output to buffer
out vec4 FragColor;

vec3 lightPositionEye;


vec3 phongModel( vec3 position, vec3 norm )
	{
	  vec3 s = normalize(lightPositionEye - position);
	  vec3 v = normalize(-position);
	  vec3 r = reflect( -s, norm );
	  vec3 ambient = Light.La * Material.Ka;
	  float sDotN = max( dot(s,norm), 0.0 );
	  vec3 diffuse = Light.Ld * Material.Kd * sDotN;
	  vec3 spec = vec3(0.0);
	  if( sDotN > 0.0 )
		  spec = Light.Ls * Material.Ks *
				 pow( max( dot(r,v), 0.0 ), Material.Shininess );
	  return ambient + diffuse + spec;
	}

 
void main()
{
    // assign vertex color to pixel color
    //FragColor = vec4(Color, 0.5);
    
    
   vec3 L = normalize(gl_LightSource[0].position.xyz - VertexEye);   
   vec3 E = normalize(-VertexEye); // we are in Eye Coordinates, so EyePos is (0,0,0)  
   vec3 R = normalize(-reflect(L,Normal));  
 
   //calculate Ambient Term:  
   vec4 Iamb = gl_FrontLightProduct[0].ambient;    

   //calculate Diffuse Term:  
   vec4 Idiff = gl_FrontLightProduct[0].diffuse * max(dot(Normal,L), 0.0);
   Idiff = clamp(Idiff, 0.0, 1.0);     
   
   // calculate Specular Term:
   vec4 Ispec = gl_FrontLightProduct[0].specular 
                * pow(max(dot(R,E),0.0),0.3*gl_FrontMaterial.shininess);
   Ispec = clamp(Ispec, 0.0, 1.0); 

   // write Total Color:  
   //gl_FragColor = gl_FrontLightModelProduct.sceneColor + Iamb + Idiff + Ispec;
   //gl_FragColor = vec4(Color, 0.5) + Iamb + Idiff + Ispec;
   //gl_FragColor = vec4(Color, 0.5);
   
   // light position in eye coordinates
   lightPositionEye = vec3(ModelViewMatrix * vec4(Light.Position.x,Light.Position.y,Light.Position.z, 1.0));
   vec3 LightIntensity = phongModel( VertexEye, Normal );
   vec3 c = vec3(0.0,1.0,1.0);
   gl_FragColor = vec4(LightIntensity, 1.0);
} 
