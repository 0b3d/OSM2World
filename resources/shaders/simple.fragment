/* Simple fragment shader with a per fragment phong lighting model.
 */ 
#version 130
	
struct LightInfo {
	vec4 Position; // Light position in world coords.
	vec3 La; // Ambient light intensity
	vec3 Ld; // Diffuse light intensity
	vec3 Ls; // Specular light intensity
};
uniform LightInfo Light;
	
struct MaterialInfo {
	vec3 Ka; // Ambient reflectivity
	vec3 Kd; // Diffuse reflectivity
	vec3 Ks; // Specular reflectivity
	float Shininess; // Specular shininess factor
};
uniform MaterialInfo Material;

uniform mat4 ModelViewMatrix;
 
// corresponds with output from vertex shader, gets interpolated
in vec3 Normal;
in vec3 VertexEye;    
 
// output to buffer
out vec4 FragColor;

vec4 lightPositionEye;

// position and normal in eye coordinates
vec3 phongModel( vec3 position, vec3 norm )
	{
	  vec3 s;
	  
	  // directional light?
	  if( Light.Position.w == 0.0 )
	      s = normalize(vec3(lightPositionEye));
	  else
	      s = normalize(vec3(lightPositionEye) - position);
	  vec3 v = normalize(-position);
	  vec3 r = reflect( -s, norm );
	  vec3 ambient = Light.La * Material.Ka;
	  float sDotN = max( dot(s,norm), 0.0 );
	  vec3 diffuse = Light.Ld * Material.Kd * sDotN;
	  vec3 spec = vec3(0.0);
	  if( sDotN > 0.0 )
		  spec = Light.Ls * Material.Ks *
				 pow( max( dot(r,v), 0.0 ), Material.Shininess );
	  return ambient + diffuse + spec;
	}

 
void main()
{
   // light position in eye coordinates
   lightPositionEye = ModelViewMatrix * Light.Position;
   
   vec3 LightIntensity = phongModel( VertexEye, normalize(Normal) );
   FragColor = vec4(LightIntensity, 1.0);
} 
