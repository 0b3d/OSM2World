/* Very simple fragment shader. It basically passes the
 * (interpolated) vertex color on to the individual pixels.
 */ 
#version 130
 
// corresponds with output from vertex shader, gets interpolated
in vec3 Color;
in vec3 Normal;
in vec3 VertexEye;    
 
// output to buffer
out vec4 FragColor;
 
void main()
{
    // assign vertex color to pixel color
    //FragColor = vec4(Color, 0.5);
    
    
   vec3 L = normalize(gl_LightSource[0].position.xyz - VertexEye);   
   vec3 E = normalize(-VertexEye); // we are in Eye Coordinates, so EyePos is (0,0,0)  
   vec3 R = normalize(-reflect(L,Normal));  
 
   //calculate Ambient Term:  
   vec4 Iamb = gl_FrontLightProduct[0].ambient;    

   //calculate Diffuse Term:  
   vec4 Idiff = gl_FrontLightProduct[0].diffuse * max(dot(Normal,L), 0.0);
   Idiff = clamp(Idiff, 0.0, 1.0);     
   
   // calculate Specular Term:
   vec4 Ispec = gl_FrontLightProduct[0].specular 
                * pow(max(dot(R,E),0.0),0.3*gl_FrontMaterial.shininess);
   Ispec = clamp(Ispec, 0.0, 1.0); 

   // write Total Color:  
   //gl_FragColor = gl_FrontLightModelProduct.sceneColor + Iamb + Idiff + Ispec;
   //gl_FragColor = vec4(Color, 0.5) + Iamb + Idiff + Ispec;
   gl_FragColor = vec4(Color, 0.5);
} 
